name: Build and push Docker image, deploy on target

env:
  DEPLOY_USER: stainless
  DEPLOY_HOST: c4dtsrv1.epfl.ch

on:
  push:
    branches:
      - master
  pull_request:
    branches:

jobs:
  build:
    name: "Test, build and push Docker image, deploy on c4dtsrv1"
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '10'

      - name: Lint TypeScript
        run: |
          cd webapp
          npm ci
          npx ng lint

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18'

      - name: Lint Go
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          cd backend
          if test $( gofmt -d . | tee gofmt.results | wc -l ) -ne 0; then cat gofmt.results; exit 1; fi

      - name: Setup protobuf C compiler
        uses: arduino/setup-protoc@v1
        with:
          version: '3.19'

      - name: Test
        run: |
          make backend-test
          make backend-serve-test
          make webapp-test

      - name: Build
        run: |
          make webapp-build

      - name: Push Docker image
        if: github.event_name == 'push'
        run: >
          docker login
          --username ${{ secrets.DOCKER_USERNAME }}
          --password ${{ secrets.DOCKER_PASSWORD }} &&
          docker push c4dt/service-stainless-backend:latest

      - name: Setup ssh key
        uses: kielabokkie/ssh-key-and-known-hosts-action@v1.2.0
        if: github.event_name == 'push'
        with:
          ssh-private-key: "${{ secrets.SSH_DEPLOY_KEY }}"
          ssh-host: "${{ env.DEPLOY_HOST }}"

      - name: Deploy
        if: github.event_name == 'push'
        run: |
          tar -C ./webapp --xz --create --file -  --exclude '*.toml' ./dist | ssh "${{ env.DEPLOY_USER }}"@"${{ env.DEPLOY_HOST }}" '(rm -rf build; mkdir build; cat > build/dist.tar.xz)'
          rsync -av --delete ./scripts "${{ env.DEPLOY_USER }}"@"${{ env.DEPLOY_HOST }}":.
          ssh "${{ env.DEPLOY_USER }}"@"${{ env.DEPLOY_HOST }}" bash --login scripts/deploy.sh
